{"version":3,"sources":["images/logo.svg","serviceWorker.ts","components/App/App.tsx","components/Header/Header.tsx","components/Table/TableActions.tsx","components/Table/TableComponent.tsx","hooks/useBooks.ts","components/Table/TableContainer.tsx","hooks/useDebounce.ts","components/Search/Search.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","App","React","useState","searchQuery","setSearchQuery","isFetching","setIsFetching","onChange","e","currentTarget","value","className","isFetchingCallback","Header","src","logo","alt","TableActions","count","page","onClick","disabled","role","aria-label","TableComponent","data","error","loading","setSortBy","sortBy","sort","a","b","volumeInfo","localeCompare","Number","MAX_SAFE_INTEGER","console","log","Date","publishedDate","getUTCSeconds","toISOString","scope","length","map","book","ind","key","id","tabIndex","title","authors","toLocaleDateString","pageCount","colSpan","message","getBooks","_","axios","get","encodeURIComponent","TableContainer","setPage","useQuery","enabled","useBooks","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","status","books","items","totalItems","Search","htmlFor","placeholder","type","queryCache","QueryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.00731721.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.28a32a78.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nimport { Header, TableContainer, Search } from \"../\";\n\nexport const App = () => {\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const [isFetching, setIsFetching] = React.useState(false);\n\n  const handleSearchInputChange = (e: React.FormEvent<HTMLInputElement>) =>\n    setSearchQuery(e.currentTarget.value);\n\n  return (\n    <>\n      <Header />\n\n      <main>\n        <Search\n          isFetching={isFetching}\n          onChange={handleSearchInputChange}\n          value={searchQuery}\n        />\n\n        <h2 className=\"sr-only\">Book List</h2>\n        <TableContainer\n          searchQuery={searchQuery}\n          isFetchingCallback={setIsFetching}\n        />\n      </main>\n    </>\n  );\n};\n","import React from \"react\";\n\nimport logo from \"../../images/logo.svg\";\n\nexport const Header = () => (\n  <header>\n    <h1 className=\"sr-only\">React Bookshelf</h1>\n    <img src={logo} className=\"logo\" alt=\"React Bookshelf\" />\n  </header>\n);\n","import React from \"react\";\n\nexport type TableActionsProps = {\n  count: number;\n  page: number;\n  onClick: (arg: number) => void;\n};\n\nexport const TableActions = ({\n  count,\n  page,\n  onClick,\n}: Readonly<TableActionsProps>) => (\n  <div className=\"table-actions\">\n    <button\n      disabled={count === 0 || page === 0}\n      onClick={() => onClick(page - 1)}\n    >\n      <span role=\"img\" aria-label=\"Show Previous\">\n        👈\n      </span>\n      <span> Prev</span>\n    </button>\n\n    <span className=\"progress\">\n      {count > 0 // TODO: Deal with totalItems being different on every fetch\n        ? `Showing ${page === 0 ? 1 : page * 10} - ${\n            (page + 1) * 10\n          } of ${count}`\n        : null}\n    </span>\n\n    <button\n      disabled={count === 0 || count / page <= 10}\n      onClick={() => onClick(page + 1)}\n    >\n      <span>Next </span>\n      <span role=\"img\" aria-label=\"Show Next\">\n        👉\n      </span>\n    </button>\n  </div>\n);\n","import React from \"react\";\n\nimport { SortType } from \"./TableContainer\";\nimport { Book } from \"../../hooks/useBooks\";\n\ntype TableComponentProps = {\n  data?: Book[];\n  error?: false | Error | null;\n  loading: boolean;\n  setSortBy: (key: SortType) => void;\n  sortBy: SortType;\n};\n\nexport const TableComponent = ({\n  data = [],\n  error = null,\n  loading,\n  setSortBy,\n  sortBy,\n}: Readonly<TableComponentProps>) => {\n  data.sort((a: Book, b: Book): number => {\n    if (sortBy === \"author\") {\n      return (a.volumeInfo[\"authors\"]\n        ? a.volumeInfo[\"authors\"][0]\n        : \"ZZZ\"\n      ).localeCompare(\n        b.volumeInfo[\"authors\"] ? b.volumeInfo[\"authors\"][0] : \"ZZZ\"\n      ); // Place empty authors at end of list\n    }\n    if (sortBy === \"pages\") {\n      return (\n        (a.volumeInfo[\"pageCount\"] ?? Number.MAX_SAFE_INTEGER) -\n        (b.volumeInfo[\"pageCount\"] ?? Number.MAX_SAFE_INTEGER)\n      ); // Place empty pageCount at end of list\n    }\n    if (sortBy === \"date\") {\n      console.log(new Date(a.volumeInfo.publishedDate).getUTCSeconds());\n      return (a.volumeInfo.publishedDate\n        ? new Date(a.volumeInfo.publishedDate).toISOString()\n        : new Date().toISOString()\n      ).localeCompare(\n        b.volumeInfo.publishedDate\n          ? new Date(b.volumeInfo.publishedDate).toISOString()\n          : new Date().toISOString()\n      ); // Place empty publishedDate at end of list\n    }\n    return a.volumeInfo[\"title\"].localeCompare(b.volumeInfo[\"title\"]);\n  });\n\n  return (\n    <div className=\"table-container\">\n      <table>\n        <caption className=\"sr-only\">Books Table</caption>\n        <thead>\n          <tr>\n            <th scope=\"col\" onClick={() => setSortBy(\"title\")}>\n              Title {sortBy === \"title\" ? <span>*</span> : null}\n            </th>\n            <th scope=\"col\" onClick={() => setSortBy(\"author\")}>\n              Author {sortBy === \"author\" ? <span>*</span> : null}\n            </th>\n            <th scope=\"col\" onClick={() => setSortBy(\"date\")}>\n              Published {sortBy === \"date\" ? <span>*</span> : null}\n            </th>\n            <th scope=\"col\" onClick={() => setSortBy(\"pages\")}>\n              Pages {sortBy === \"pages\" ? <span>*</span> : null}\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {data.length > 0 ? (\n            data.map((book: Book, ind: number) => (\n              <tr key={book.id + ind} tabIndex={0}>\n                <td>{book.volumeInfo.title ?? \"---\"}</td>\n                <td>\n                  {book.volumeInfo.authors ? book.volumeInfo.authors[0] : \"---\"}\n                </td>\n                <td>\n                  {book.volumeInfo.publishedDate\n                    ? new Date(\n                        book.volumeInfo.publishedDate\n                      ).toLocaleDateString()\n                    : \"---\"}\n                </td>\n                <td>{book.volumeInfo.pageCount ?? \"---\"}</td>\n              </tr>\n            ))\n          ) : loading ? (\n            <tr>\n              <td colSpan={4}>{\"Loading books...\"}</td>\n            </tr>\n          ) : error ? (\n            <tr>\n              <td colSpan={4}>\n                {error.message ?? \"There was an error with your search.\"}\n              </td>\n            </tr>\n          ) : (\n            <tr>\n              <td colSpan={4}>{\"No books found, maybe refine your search?\"}</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\nexport type VolumeInfo = {\n  authors: string[];\n  imageLinks: {\n    smallThumbnail: string;\n    thumbnail: string;\n  };\n  pageCount: number;\n  publishedDate: string;\n  subtitle: string;\n  title: string;\n};\n\nexport type Book = {\n  id: number;\n  volumeInfo: VolumeInfo;\n};\n\nexport type BookResponse = {\n  kind: \"books#volumes\";\n  items?: Book[];\n  totalItems: number;\n};\n\nconst getBooks = async (\n  _: string, // TODO: Figure out what this arg is\n  searchQuery: string,\n  page: number\n): Promise<BookResponse> => {\n  const { data } = await axios.get(\n    `https://www.googleapis.com/books/v1/volumes?q=${encodeURIComponent(\n      searchQuery\n    )}&fields=kind,items(id,volumeInfo(authors,imageLinks,pageCount,publishedDate,subtitle,title)),totalItems&startIndex=${page}`\n  );\n\n  return data;\n};\n\nexport default function useBooks(searchQuery: string, page: number) {\n  return useQuery<BookResponse, Error>([\"books\", searchQuery, page], getBooks, {\n    enabled: searchQuery, // If we have searchQuery, enable the query on render\n  });\n}\n","import React from \"react\";\n// import { ReactQueryDevtools } from \"react-query-devtools\";\n\nimport { TableComponent } from \"./TableComponent\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport useBooks from \"../../hooks/useBooks\";\nimport { TableActions } from \"./TableActions\";\n\nexport type SortType = \"author\" | \"pages\" | \"title\" | \"date\";\n\nexport type TableContainerProps = {\n  searchQuery: string;\n  isFetchingCallback: (isFetching: boolean) => void;\n};\n\nexport const TableContainer = ({\n  searchQuery,\n  isFetchingCallback,\n}: Readonly<TableContainerProps>) => {\n  const [page, setPage] = React.useState(0);\n  const [sortBy, setSortBy] = React.useState<SortType>(\"title\");\n  const debouncedSearchQuery = useDebounce(searchQuery, 600);\n  const { status, data, error, isFetching } = useBooks(\n    debouncedSearchQuery,\n    page * 10 // useBooks default query returns 10 results\n  );\n\n  React.useEffect(() => isFetchingCallback(isFetching), [\n    isFetching,\n    isFetchingCallback,\n  ]);\n\n  const books = data?.items ?? [];\n  const count = data?.totalItems ?? 0;\n\n  return (\n    <>\n      <p>* Sorted by</p>\n      <TableComponent\n        data={books}\n        loading={isFetching}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n        error={status === \"error\" && error}\n      />\n      <TableActions count={count} page={page} onClick={setPage} />\n      {/* <ReactQueryDevtools /> */}\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default function useDebounce(value: string, delay: number = 500) {\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler: NodeJS.Timeout = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import React from \"react\";\n\ntype SearchProps = {\n  isFetching: boolean;\n  value: string;\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void;\n};\n\nexport const Search = ({\n  isFetching,\n  value,\n  onChange,\n}: Readonly<SearchProps>) => {\n  return (\n    <form className=\"search\">\n      <div role=\"search\">\n        <label className=\"sr-only\" htmlFor=\"book-search\">\n          Search books\n        </label>\n\n        <span className=\"search-icon\">\n          {isFetching ? (\n            <span role=\"img\" aria-label=\"Fetching Icon\">\n              ⏳\n            </span>\n          ) : (\n            <span role=\"img\" aria-label=\"Search Icon\">\n              🔍\n            </span>\n          )}\n        </span>\n\n        <input\n          id=\"book-search\"\n          placeholder=\"Search books...\"\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </div>\n    </form>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryCache, ReactQueryCacheProvider } from \"react-query\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./styles/normalize.css\";\nimport \"./styles/global.css\";\nimport { App } from \"./components\";\n\nconst queryCache = new QueryCache();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReactQueryCacheProvider queryCache={queryCache}>\n      <App />\n    </ReactQueryCacheProvider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}